"""
Service simplificado para an√°lise de imagens usando Ollama
"""
import json
import time
import requests
from pathlib import Path
from typing import List, Dict, Optional, Tuple, Any
from datetime import datetime
from PIL import Image
import base64
from io import BytesIO

from .base_service import BaseService
from ..config import Config

class ImageServiceSimple(BaseService):
    """Service simplificado para an√°lise de imagens usando Ollama"""
    
    def _initialize(self):
        """Inicializar servi√ßo"""
        self.ollama_url = Config.OLLAMA_BASE_URL
        self.model_name = "llava:7b"  # Modelo mais leve e est√°vel
        self._check_ollama_connection()
    
    def _check_ollama_connection(self):
        """Verificar conex√£o com Ollama"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                self.logger.info("‚úÖ Conex√£o com Ollama estabelecida")
                
                # Verificar se o modelo est√° dispon√≠vel
                models = response.json().get('models', [])
                model_names = [model['name'] for model in models]
                
                if self.model_name in model_names:
                    self.logger.info(f"‚úÖ Modelo {self.model_name} dispon√≠vel")
                else:
                    self.logger.warning(f"‚ö†Ô∏è Modelo {self.model_name} n√£o encontrado")
                    self.logger.info("üí° Modelos dispon√≠veis: " + ", ".join(model_names))
            else:
                self.logger.error("‚ùå Falha na conex√£o com Ollama")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao conectar com Ollama: {e}")
    
    def _encode_image_to_base64(self, image_path: str) -> Optional[str]:
        """Codificar imagem para base64"""
        try:
            if image_path.startswith('http'):
                # Download de URL
                response = requests.get(image_path)
                image = Image.open(BytesIO(response.content))
            else:
                # Arquivo local
                if not Path(image_path).exists():
                    self.logger.error(f"Imagem n√£o encontrada: {image_path}")
                    return None
                image = Image.open(image_path)
            
            # Converter para RGB se necess√°rio
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Redimensionar se muito grande
            max_size = 1024
            if max(image.size) > max_size:
                ratio = max_size / max(image.size)
                new_size = (int(image.size[0] * ratio), int(image.size[1] * ratio))
                image = image.resize(new_size, Image.Resampling.LANCZOS)
            
            # Codificar para base64
            buffer = BytesIO()
            image.save(buffer, format='JPEG', quality=85)
            img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            return img_base64
            
        except Exception as e:
            self.logger.error(f"Erro ao codificar imagem: {e}")
            return None
    
    def analyze_image(self, image_path: str, prompt: str = None) -> Optional[Dict]:
        """Analisar e descrever uma imagem usando m√∫ltiplos prompts com valida√ß√£o"""
        self._ensure_initialized()
        self._log_operation("an√°lise de imagem", {"image_path": image_path, "prompt": prompt})
        
        try:
            # Se prompt espec√≠fico fornecido, usar apenas ele
            if prompt:
                return self._analyze_with_single_prompt(image_path, prompt)
            
            # Caso contr√°rio, usar sistema de m√∫ltiplos prompts
            return self._analyze_with_multiple_prompts(image_path)
            
        except Exception as e:
            self._log_error("an√°lise de imagem", e)
            return None
    
    def _analyze_with_single_prompt(self, image_path: str, prompt: str) -> Optional[Dict]:
        """Analisar imagem com um prompt espec√≠fico"""
        try:
            # Codificar imagem
            img_base64 = self._encode_image_to_base64(image_path)
            if not img_base64:
                return None
            
            # Preparar payload para Ollama
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "images": [img_base64],
                "stream": False,
                "options": {
                    "temperature": 0.2,
                    "top_p": 0.9,
                    "max_tokens": 512
                }
            }
            
            # Enviar requisi√ß√£o
            start_time = time.time()
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=120
            )
            generation_time = time.time() - start_time
            
            if response.status_code != 200:
                self.logger.error(f"Erro na requisi√ß√£o Ollama: {response.status_code}")
                return None
            
            # Processar resposta
            result_data = response.json()
            description = result_data.get('response', '').strip()
            
            if not description:
                self.logger.error("Resposta vazia do modelo")
                return None
            
            # Preparar resultado
            result = {
                'description': description,
                'prompt_used': prompt,
                'image_path': image_path,
                'generation_time': generation_time,
                'model': self.model_name,
                'analyzed_at': datetime.now().isoformat()
            }
            
            self._log_success("an√°lise de imagem", {
                "description_length": len(result['description']),
                "generation_time": generation_time
            })
            
            return result
            
        except Exception as e:
            self._log_error("an√°lise com prompt √∫nico", e)
            return None
    
    def _analyze_with_multiple_prompts(self, image_path: str) -> Optional[Dict]:
        """Analisar imagem com m√∫ltiplos prompts e valida√ß√£o"""
        try:
            # Lista de prompts para diferentes cen√°rios
            prompts = [
                {
                    "name": "Detalhado Geral",
                    "prompt": "Analise esta imagem em detalhes e descreva tudo que voc√™ v√™ em portugu√™s. Inclua: objetos, pessoas, ambiente, cores, texturas, atividades, texto vis√≠vel, e contexto geral. Seja espec√≠fico e descritivo.",
                    "weight": 1.0
                },
                {
                    "name": "Captura de Tela",
                    "prompt": "Esta √© uma captura de tela. Descreva o conte√∫do vis√≠vel em portugu√™s, incluindo interface, bot√µes, texto, menus e funcionalidades vis√≠veis.",
                    "weight": 0.8
                },
                {
                    "name": "Documento/Recibo",
                    "prompt": "Analise este documento ou recibo e descreva todas as informa√ß√µes vis√≠veis em portugu√™s. Inclua valores, datas, nomes, c√≥digos e qualquer texto presente.",
                    "weight": 0.7
                },
                {
                    "name": "Foto Pessoal",
                    "prompt": "Descreva esta foto em portugu√™s, incluindo pessoas, ambiente, objetos, atividades e contexto geral. Seja respeitoso e objetivo.",
                    "weight": 0.6
                },
                {
                    "name": "Simples Direto",
                    "prompt": "O que voc√™ v√™ nesta imagem? Descreva em portugu√™s de forma clara e objetiva.",
                    "weight": 0.5
                }
            ]
            
            results = []
            
            # Testar cada prompt
            for prompt_info in prompts:
                self.logger.info(f"Testando prompt: {prompt_info['name']}")
                
                result = self._analyze_with_single_prompt(image_path, prompt_info['prompt'])
                
                if result:
                    # Verificar se √© uma resposta v√°lida (n√£o recusa)
                    if self._is_valid_response(result['description']):
                        result['prompt_name'] = prompt_info['name']
                        result['prompt_weight'] = prompt_info['weight']
                        results.append(result)
                        self.logger.info(f"‚úÖ Prompt '{prompt_info['name']}' funcionou: {len(result['description'])} chars")
                    else:
                        self.logger.info(f"‚ö†Ô∏è Prompt '{prompt_info['name']}' recusado: {result['description'][:50]}...")
                else:
                    self.logger.info(f"‚ùå Prompt '{prompt_info['name']}' falhou")
            
            # Se nenhum prompt funcionou, usar o mais simples
            if not results:
                self.logger.warning("Nenhum prompt funcionou, usando prompt de fallback")
                fallback_result = self._analyze_with_single_prompt(
                    image_path, 
                    "Descreva esta imagem em portugu√™s."
                )
                if fallback_result:
                    fallback_result['prompt_name'] = 'Fallback'
                    fallback_result['prompt_weight'] = 0.1
                    results.append(fallback_result)
            
            # Escolher o melhor resultado
            if results:
                # Ordenar por peso e tamanho da descri√ß√£o
                best_result = max(results, key=lambda x: (x['prompt_weight'], len(x['description'])))
                
                self.logger.info(f"Melhor resultado: {best_result['prompt_name']} ({len(best_result['description'])} chars)")
                
                return best_result
            
            return None
            
        except Exception as e:
            self._log_error("an√°lise com m√∫ltiplos prompts", e)
            return None
    
    def _is_valid_response(self, description: str) -> bool:
        """Verificar se a resposta √© v√°lida (n√£o √© uma recusa)"""
        if not description or len(description.strip()) < 10:
            return False
        
        # Palavras que indicam recusa
        refusal_keywords = [
            "desculpe", "n√£o posso", "n√£o consigo", "n√£o posso fornecer",
            "n√£o posso analisar", "n√£o posso descrever", "n√£o posso ver",
            "imagem n√£o est√°", "imagem parece", "imagem est√° ausente",
            "n√£o consigo ver", "n√£o consigo analisar", "n√£o consigo descrever",
            "n√£o posso ajudar", "n√£o posso processar", "n√£o posso identificar"
        ]
        
        description_lower = description.lower()
        
        # Se cont√©m palavras de recusa, √© inv√°lida
        if any(keyword in description_lower for keyword in refusal_keywords):
            return False
        
        # Se √© muito curta, provavelmente √© inv√°lida
        if len(description.strip()) < 20:
            return False
        
        return True
    
    def analyze_image_batch(self, image_paths: List[str], prompt: str = None) -> List[Optional[Dict]]:
        """Analisar m√∫ltiplas imagens em batch"""
        self._log_operation("an√°lise em batch", {"image_count": len(image_paths), "prompt": prompt})
        
        results = []
        
        for i, image_path in enumerate(image_paths, 1):
            self.logger.info(f"Processando imagem {i}/{len(image_paths)}: {Path(image_path).name}")
            result = self.analyze_image(image_path, prompt)
            results.append(result)
        
        successful = len([r for r in results if r is not None])
        self._log_success("an√°lise em batch", {
            "total": len(image_paths),
            "successful": successful,
            "failed": len(image_paths) - successful
        })
        
        return results
    
    def extract_text_from_image(self, image_path: str) -> Optional[Dict]:
        """Extrair texto de uma imagem (OCR)"""
        self._ensure_initialized()
        self._log_operation("extra√ß√£o de texto", {"image_path": image_path})
        
        try:
            # Usar prompt espec√≠fico para OCR
            ocr_prompt = "Identifique e transcreva todo o texto vis√≠vel nesta imagem. Retorne apenas o texto encontrado, sem explica√ß√µes adicionais. Se n√£o houver texto, responda 'Nenhum texto encontrado'."
            
            result = self.analyze_image(image_path, ocr_prompt)
            
            if result:
                result['extraction_type'] = 'OCR'
                result['prompt_used'] = ocr_prompt
            
            return result
            
        except Exception as e:
            self._log_error("extra√ß√£o de texto", e)
            return None
    
    def test_image_analysis(self, image_path: str) -> bool:
        """Testar an√°lise de imagem"""
        self.logger.info(f"üß™ Testando an√°lise de imagem: {image_path}")
        
        try:
            result = self.analyze_image(image_path)
            if result:
                self.logger.info(f"‚úÖ Teste OK - Descri√ß√£o: {result['description'][:100]}...")
                return True
            else:
                self.logger.error("‚ùå Teste falhou")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå Erro no teste: {e}")
            return False
    
    def save_analysis_to_json(self, conversation_id: str, message_id: str, 
                             analysis_data: Dict) -> Optional[str]:
        """Salvar an√°lise em arquivo JSON"""
        self._ensure_initialized()
        
        try:
            # Criar diret√≥rio da conversa
            conv_dir = Config.TRANSCRIPTIONS_DIR / conversation_id
            conv_dir.mkdir(exist_ok=True)
            
            # Caminho do arquivo JSON
            json_path = conv_dir / f"{message_id}_image_analysis.json"
            
            # Se j√° existe, retornar
            if json_path.exists():
                self.logger.info(f"An√°lise j√° existe: {json_path.name}")
                return str(json_path)
            
            # Preparar dados para salvar
            save_data = {
                "conversation_id": conversation_id,
                "message_id": message_id,
                "analysis": analysis_data,
                "created_at": datetime.now().isoformat(),
                "model": self.model_name,
                "service": "ollama"
            }
            
            # Salvar JSON
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ An√°lise salva: {json_path.name}")
            return str(json_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao salvar an√°lise: {e}")
            return None
    
    def load_analysis_from_json(self, conversation_id: str, message_id: str) -> Optional[Dict]:
        """Carregar an√°lise de arquivo JSON"""
        self._ensure_initialized()
        
        try:
            json_path = Config.TRANSCRIPTIONS_DIR / conversation_id / f"{message_id}_image_analysis.json"
            
            if not json_path.exists():
                return None
            
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            return data.get('analysis')
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao carregar an√°lise: {e}")
            return None
